iMan 0.2
Copyright (c) 2004-2006 by David Reed. This application and its source code are distributed under the terms of the BSD License, which should be included in this distribution.

Thanks for downloading iMan. This directory contains almost everything you'll need to build or make changes to iMan: source code, resources, and and links to the third-party frameworks needed (see below). 

iMan is divided into two main parts, an application and an engine framework. The application, conceptually the Controller layer, manages iMan's UI and interacts with the Model layer, iManEngine.framework. The engine framework handles the low-level duties of asynchronously interfacing with the command line tools (man, groff, and makewhatis), parsing output, and sending that output in displayable form back to the UI. The engine could fairly easily be embedded in other applications that need this functionality. However, the iManEngine may not work reliably in more than one application running at the same time.

Currently, iMan consists of the following classes:
	* iMan
		The delegate of NSApplication, handles various minor tasks and service invocations. Also responsible for re-indexing and update checking.
	* iManDocument
		The "viewing window" class, iManDocument handles loading and display of man pages. It also provides the +loadURL:inNewDocument: method used by URL handlers and services.
	* iManSearchDocument
		The "search window" class. iManSearchDocument is really conceptually closer to an NSWindowController than an NSDocument, but for the time being it is a non-loadable, non-savable document class. It basically implements an interface for iManSearchEngine and nothing more.
	* iManPreferencesController
		A fairly straightforward preference window controller. The font and style handling code is complex for a reason: font/styles are saved as archived NSDictionaries that can be applied directly to styled text, hence some manipulation must be done for each style change.
	* iManURLHandler
		This class is invoked to handle clicks on URLs of scheme "man:" and "x-man-page:" (see iMan.scriptTerminology). It calls through to +[iManDocument loadURL:inNewDocument:] passing the current external link preference for inNewDocument.
		
iManEngine.framework holds the following classes:
	* iManPage
		This class represents a single page. It abstracts away all the work of resolving and rendering pages, which is done asynchronously in a dedicated thread.
	* iManSearch
		As iManPage is to rendering manpages, iManSearch is to searching them. It provides an API that supports future expansion (like SearchKit indexing/searching), though currently it provides only apropos/whatis searches.
	* iManIndex
		iManIndex represents one of the theoretically more than one indexes used by iManSearch (right now, there is only the singleton iManAproposIndex).
	* iManEnginePreferences
		This class manages manpaths and tool paths. Called by both UI and engine. It uses locks for thread safety.
	* NSTask+iManExtensions
		This is a simple category to launch a task synchronously and get its output. It is private to iManEngine.
		
	* Helper Tool
		iManEngine depends on the HelperTool target, which builds a self-authorizing tool which iManEngine uses to run makewhatis when indexing. The helper tool design was originally based on Apple's MoreAuthSample example, but has been massively simplified (it does not make itself setuid -- it seems reasonable to require authorization on each makewhatis invocation).


In order to compile iMan from source, you'll need two third-party frameworks:
	* AGRegex.framework
		http://sourceforge.net/projects/agkit/
		This framework provides iMan's regular expression matching.
		The AGRegex binary included in iMan by default has had the included PCRE 4.3 replaced with the newer PCRE 4.5: http://www.pcre.org.
	* The MacPAD SDK
		http://sourceforge.net/projects/macpad/
		iMan needs the Cocoa portions of the SDK - MacPADSocket.[hm] - to do its automatic updates.

[FIXME] update As the project file is set up, you need to put AGRegex.framework (however you choose to compile it) and the "MacPAD" folder from the MacPAD Cocoa SDK folder in the root directory of the iMan project (with iMan.xcode).

Well, I hope this helps clarify what all is in the guts of iMan. The source code is fairly lightly commented, but some important parts have more information about what's going on. If you have questions (or patches, or bugs, or improvements, or...), please send me an email.

-- David Reed <parmadil@gmail.com>
